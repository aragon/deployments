#!/usr/bin/env node

const path = require('path')
const { promisify } = require('util')

const mkdirp = promisify(require('mkdirp'))
const find = promisify(require('recursive-readdir'))
const decompress = promisify(require('targz').decompress)

const FIND_PATH = './environments'
const DESTINATION = './decompressed'
const EXTENSION = '.tar.gz'

const findAndDecompressFiles = async (strict = false) => {
  // exclude files that aren't tar.gz or a directory (to continue traversing)
  const exclude = (file, stats) =>
    !stats.isDirectory() && !file.endsWith(EXTENSION)

  const files = await find(FIND_PATH, ['node_modules', '.git', exclude])

  await mkdirp(DESTINATION)

  await Promise.all(
    files
      .map((src) => ({
        src,
        // Destination file name: DESTINATION/[environment]_[repo@version]
        dest: path.join(DESTINATION, `${src.split('/')[1]}_${path.basename(src, EXTENSION)}`)
      }))
      .map(async (options) => {
        try {
          await decompress(options)
          console.log('extracted', options.dest)
        } catch (e) {
          console.log('failed to extract', options.src, e)
          if (strict) {
            process.exit(1)
          }
        }
      })
  )
}

findAndDecompressFiles(process.env.STRICT)