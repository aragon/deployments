#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const ethers = require('ethers')
const execa = require('execa')
const yaml = require('js-yaml')
const { promisify } = require('util')
const mkdirp = promisify(require('mkdirp'))
const dotprop = require('dot-prop')
const { create: IpfsCreate } = require('ipfs-http-client')

const ipfsApiUrl = process.env.IPFS_URL || 'https://ipfs.infura.io:5001'
const defaultAPM = require('./helpers/default-apm')
const ENVIRONMENTS = require('./helpers/environments')

const NEW_VERSION_ABI = ["event NewVersion(uint256 versionId, uint16[3] semanticVersion)"]
const REPO_ABI = [`function getBySemanticVersion(uint16[3] _semanticVersion) public
  view returns (uint16[3] version, address contractAddress, bytes contentURI)`]

const ENVIRONMENTS_PATH = path.resolve(__dirname, '../environments')

const getArchiveSavePath = (env, repo, version) =>
  path.join(ENVIRONMENTS_PATH, env, repo, `${repo}@${version}.tar.gz`)

const getAndSaveIPFSFile = async (hash, output) => {
  const ipfs = IpfsCreate({ url: ipfsApiUrl })
  const writer = fs.createWriteStream(output)
  const options = { archive: true, compress: true }
  let error = null
  const callback = (err) => { error = err }

  for await (const buf of ipfs.get(hash, options))
  {
    const needDrain = !writer.write(buf, callback)
    if (error) break

    if (needDrain) {
      await new Promise((resolve) => {
        // wait for writer to drain before reading next chunk from ipfs
        writer.once('drain', () => {
          resolve()
        })
      })
    }
  }
  writer.end()

  if (error) {
     throw error
  }
}

const getVersion = async (provider, repoName, version) => {
  const address = await provider.resolveName(repoName)
  const contract = new ethers.Contract(address, REPO_ABI, provider)
  return contract.getBySemanticVersion(version)
}

const getProvider = async (node, ens) => {
  const tempProvider = new ethers.providers.JsonRpcProvider(node)
  const network = await tempProvider.getNetwork()
  network.ensAddress = ens

  return new ethers.providers.JsonRpcProvider(node, network)
}

const getPublishedVersion = async (provider, txHash, repoName) => {
  const receipt = await provider.getTransactionReceipt(txHash)

  const repoAddress = await provider.resolveName(repoName)

  // Only supports one log per transaction
  const log = receipt.logs.find(
    ({ address }) => address.toLowerCase() === repoAddress.toLowerCase()
  )

  if (!log) {
    throw new Error(`Couldn't find a publish log for ${repoName} in transaction ${txHash}`)
  }

  try {
    const iface = new ethers.utils.Interface(NEW_VERSION_ABI)
    const parsed = iface.parseLog(log)
    const { semanticVersion } = parsed.args
    const { version, contractAddress, contentURI } = await getVersion(provider, repoName, semanticVersion)

    const parsedContent = ethers.utils.toUtf8String(contentURI)
    const contentLocator = parsedContent.split(':')

    return {
      version: version.join('.'),
      contractAddress,
      content: {
        provider: contentLocator[0],
        location: contentLocator[1]
      }
    }
  } catch (err) {
    console.log('Unable to parse new version event log:', err.message)
    throw err
  }
}

const getTransactionTimestamp = async (provider, txHash) => {
  const transaction = await provider.getTransaction(txHash)

  if (!transaction) {
    throw new Error(`Couldn't find transaction ${txHash} in connected node`)
  }

  const { blockNumber } = transaction

  if (!blockNumber) {
    throw new Error(`Transaction ${txHash} hasn't been included in a block yet`)
  }

  const { timestamp } = await provider.getBlock(blockNumber)

  return timestamp
}

const saveDeploymentEntry = (environmentName, repoName, version, entry) => {
  const filename = path.join(ENVIRONMENTS_PATH, environmentName, 'deploys.yml')

  let file
  try {
    file = fs.readFileSync(filename)
  } catch (e) {
    console.log(`deploys.yml doesn't exist for environment ${environmentName}. Creating a new file.`)
  }

  let deploys = file ? yaml.safeLoad(file) : {}

  const sanitizedKey = key => key.split('.').join('\\.')
  const key = `${sanitizedKey(repoName)}.versions.${sanitizedKey(version)}`

  if (dotprop.get(deploys, key)) {
    console.log(`Overwritting existent deployment entry for ${repoName}@${version}`)
  }

  deploys = dotprop.set(deploys, key, entry)

  const outputFile = yaml.safeDump(deploys, { noRefs: true })

  fs.writeFileSync(filename, outputFile)
}

const run = async (environmentName, repoName, txHash, commitHash) => {
  repoName = defaultAPM(repoName)

  const { node, ens } = ENVIRONMENTS[environmentName]

  const provider = await getProvider(node, ens)

  console.log(`Fetching info for '${repoName}' on ${environmentName}...`)
  const timestamp = await getTransactionTimestamp(provider, txHash)
  const date = new Date(timestamp * 1000)

  const { version, content, contractAddress } = await getPublishedVersion(provider, txHash, repoName)
  console.log(`Creating deployment record for ${repoName}@${version} on ${environmentName}`)

  if (content.provider !== 'ipfs') {
    throw new Error(`Provider ${content.provider} is not supported. Only IPFS provider is valid.`)
  }

  const output = getArchiveSavePath(environmentName, repoName, version)
  await mkdirp(path.dirname(output))

  await getAndSaveIPFSFile(content.location, output)

  const deploymentEntry = {
    date,
    txHash,
    ipfsHash: content.location,
    contractAddress,
    commitHash,
  }

  saveDeploymentEntry(environmentName, repoName, version, deploymentEntry)
  process.exit(0)
}

const argv = require('yargs')
  .usage('Usage: $0 <repo ENS name> <publish tx hash> <commit hash> [options]')
  .option('environment', {
    alias: 'e',
    choices: Object.keys(ENVIRONMENTS),
    default: 'local',
    describe: 'env to use',
    type: 'string',
  })
  .demandCommand(1, "You must provide the repo's ENS name.")
  .demandCommand(2, "You must provide the hash for the publish transaction")
  .demandCommand(3, "You must provide the commit hash of the repo")
  .argv

run(argv.environment, ...argv._).catch(console.error)
