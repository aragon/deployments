#!/usr/bin/env node

const path = require('path')
const Web3 = require('web3')
const APM = require('@aragon/apm')
const execa = require('execa')
const { promisify } = require('util')
const mkdirp = promisify(require('mkdirp'))

const defaultAPM = require('./helpers/default-apm')
const ENVIRONMENTS = require('./helpers/environments')

const NEW_VERSION_LOG_ABI = [{ type: 'uint256', name: 'versionId' }, { type: 'uint16[3]', name: 'semanticVersion'}]

const getSavePath = (env, repo, version) =>
 `environments/${env}/${repo}/${repo}@${version}`

const ipfsGetCommand = (hash, output) =>
  `get -a -C -o ${output} ${hash}`

const getAndSaveIPFSFile = async (hash, output) => {
  const { stdout } = await execa('ipfs', ipfsGetCommand(hash, output).split(' '))

  console.log(stdout)
}

const getPublishedVersion = async (txHash, repoName, { node, ens }) => {
  const web3 = new Web3(node)
  const apm = APM(web3, { ensRegistryAddress: ens })

  const receipt = await web3.eth.getTransactionReceipt(txHash)
  const repoAddress = await apm.ensResolve(repoName)

  // Only supports one log per transaction
  const log = receipt.logs.find(
    ({ address }) => address.toLowerCase() === repoAddress.toLowerCase()
  )

  const { semanticVersion } = web3.eth.abi.decodeLog(NEW_VERSION_LOG_ABI, log.data, log.topics)

  return apm.getVersion(repoName, semanticVersion, 2000)
}

const run = async (environmentName, repoName, txHash, commitHash) => {
  repoName = defaultAPM(repoName)

  const environment = ENVIRONMENTS[environmentName]

  console.log(`Fetching info for '${repoName}' on ${environmentName}...`)
  const { version, content, contractAddress } = await getPublishedVersion(txHash, repoName, environment)
  console.log(`Creating deployment record for ${repoName}@${version} on ${environmentName}`)

  if (content.provider !== 'ipfs') {
    throw new Error(`Provider ${content.provider} is not supported. Only IPFS provider is valid.`)
  }

  const output = getSavePath(environmentName, repoName, version)
  await mkdirp(path.dirname(output))

  getAndSaveIPFSFile(content.location, output)
}

const argv = require('yargs')
  .usage('Usage: $0 <repo ENS name> <publish tx hash> <commit hash> [options]')
  .option('environment', {
    alias: 'e',
    choices: Object.keys(ENVIRONMENTS),
    default: 'local',
    describe: 'env to use',
    type: 'string',
  })
  .demandCommand(1, "You must provide the repo's ENS name.")
  .demandCommand(2, "You must provide the hash for the publish transaction")
  .demandCommand(3, "You must provide the commit hash of the repo")
  .argv

run(argv.environment, ...argv._)
